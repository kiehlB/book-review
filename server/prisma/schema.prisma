generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  owner
  admin
  member
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  password     String?   @db.VarChar(255)
  name         String?   @db.VarChar(255)
  thumbURL     String?   @db.VarChar(1024)
  verified     Boolean?  @default(false)
  lastSignedIn DateTime?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt
  deletedAt    DateTime?

  posts        Post[]
  profile      Profile?
  Notification Notification[]
  blockedUsers BlockedUser[]
  Report       Report[]

  BlockedUser BlockedUser[] @relation("UserBlock")
  reports     Report[]      @relation("UserReport")
}

model Profile {
  id    Int     @id @default(autoincrement())
  about String?

  userId String @unique
  User   User   @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int       @id @default(autoincrement())
  token     String    @unique @db.VarChar(1024)
  device    String?   @db.VarChar(255)
  os        String?   @db.VarChar(255)
  createdAt DateTime? @default(now())

  userId String @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id])
}

model BlockedUser {
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  deletedAt DateTime?

  userId        String
  user          User   @relation("UserBlock", fields: [userId], references: [id])
  blockedUserId String
  blockedUser   User   @relation(fields: [blockedUserId], references: [id])

  @@id([userId, blockedUserId])
}

model Report {
  id        String    @id @default(cuid())
  report    String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  deletedAt DateTime?

  userId         String
  user           User   @relation("UserReport", fields: [userId], references: [id])
  reportedUserId String
  reportedUser   User   @relation(fields: [reportedUserId], references: [id])
}

//follower following

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean? @default(false)

  author User?  @relation(fields: [userId], references: [id])
  userId String
}
