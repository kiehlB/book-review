generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  member
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  password     String?   @db.VarChar(255)
  name         String?   @db.VarChar(255)
  verified     Boolean?  @default(false)
  role         Role      @default(member)
  lastSignedIn DateTime?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now()) @updatedAt
  deletedAt    DateTime?

  posts        Post[]
  follower     Follower[]     @relation("follower")
  followed     Follower[]     @relation("followed")
  profile      Profile?
  Notification Notification[]
  blockedUsers BlockedUser[]
  Report       Report[]
  tokens       Token[]
  accounts     Account[]

  BlockedUser BlockedUser[] @relation("UserBlock")
  reports     Report[]      @relation("UserReport")
  Like        Like[]
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([token, type])
  @@index([userId])
}

model Profile {
  id       Int     @id @default(autoincrement())
  about    String?
  thumbURL String? @db.VarChar(1024)
  userId   String  @unique
  User     User    @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int       @id @default(autoincrement())
  token     String    @unique @db.VarChar(1024)
  device    String?   @db.VarChar(255)
  os        String?   @db.VarChar(255)
  createdAt DateTime? @default(now())

  userId String @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id])
}

model BlockedUser {
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  deletedAt DateTime?

  userId        String
  user          User   @relation("UserBlock", fields: [userId], references: [id])
  blockedUserId String
  blockedUser   User   @relation(fields: [blockedUserId], references: [id])

  @@id([userId, blockedUserId])
}

model Report {
  id        String    @id @default(cuid())
  report    String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now()) @updatedAt
  deletedAt DateTime?

  userId         String
  user           User   @relation("UserReport", fields: [userId], references: [id])
  reportedUserId String
  reportedUser   User   @relation(fields: [reportedUserId], references: [id])
}

model Follower {
  id         String   @id @default(cuid())
  followerId String
  followedId String
  createAt   DateTime @default(now())
  follower   User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followed   User     @relation("followed", fields: [followedId], references: [id], onDelete: Cascade)

  @@map("followers")
}

model Post {
  id         String   @id @default(cuid())
  title      String
  body       String?
  thumbnail  String?
  views      Int      @default(0)
  is_private Boolean? @default(true)

  likes   Like[]
  Comment Comment[]
  author  User?     @relation(fields: [userId], references: [id])
  userId  String
  tags    Tag[]
}

model Like {
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Tag {
  tagName String @db.VarChar(20)
  post    Post   @relation(fields: [postId], references: [id])
  postId  String

  @@unique([postId, tagName])
}

model Comment {
  id      String   @id @default(cuid())
  created DateTime @default(now())
  text    String   @db.VarChar(200)

  userEmail String?
  post      Post    @relation(fields: [postId], references: [id])
  postId    String

  @@index([postId])
}
